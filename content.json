{"pages":[{"title":"","text":"404 404 你懂的","link":"/404.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"About","text":"","link":"/about/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Docker 常用命令手册","text":"删除所有Docker容器1docker rm `docker ps -a -q` 删除所有Docker镜像1docker rmi `docker images -q` 登陆到Docker容器1docker exec -it &lt;containerId&gt; /bin/bash 通过 Dockerfile 打包镜像1234# 切换到Dockerfile 文件目录cd &lt;docker file path&gt;## 指定镜像名称&lt;iamge name&gt; 镜像路径&lt;image page&gt;docker build -t &lt;image name&gt; &lt;image_path&gt; 重新命名镜像1docker tag &lt;imageId&gt; &lt;image name&gt; 例子 1docker tag ca1b6b825289 huotaihe/selenium:latest","link":"/2018/12/13/docker-common-command-manual/"},{"title":"springboot-runtime-log-level","text":"序言 Spring Boot 在 spring-boot-starter-actuator 模块中提供了日志相关的 EndPoint，通过该 EndPoint 可以在运行时不需要重启服务就可以修改日志的打印级别。 解决了以前修改日志打印级别必须要重启服务的烦恼。 环境信息 spring boot 2.0.4.RELEASE(1.5以前的版本不适用该博文) JDK 1.8 POM 信息123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 启用loggers Endpoint出于安全因素考虑，依赖spring-boot-starter-actuator后，默认值启用了“/health”和“/info”两个 Endpoint可以通过如下配置启用所有的 endpoint 1management.endpoints.web.exposure.include=* 也可以通过该配置启用指定的 endpoint1management.endpoints.web.exposure.include=loggers,sessions 查看日志级别我们可以通过浏览器请求到 http://127.0.0.1:8080/actuator/loggers 来获取支持的日志等级，以及系统默认的日志等和各个包路径对应的日志级别。ps: 如下结果是精简过的，实际返回值很多1234567891011121314151617181920212223242526272829303132333435363738394041424344{ \"levels\":[ \"OFF\", \"ERROR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\" ], \"loggers\":{ \"ROOT\":{ \"configuredLevel\":\"INFO\", \"effectiveLevel\":\"INFO\" }, \"com\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring.boot\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring.boot.log\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring.boot.log.Application\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" } }} 配置日志级别编写日志输出类编写一个controller 输出各个级别的日志： 注意：日志门面类要使用 commons-log，而不能使用 sl4j；使用 sl4j 会导致日志级别不生效，具体原因会继续跟进。 123456789101112131415161718192021222324252627282930313233343536373839404142package com.github.huotaihe.spring.boot.log;import java.util.HashMap;import java.util.Map;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class LogController { private final static Logger LOG = LoggerFactory.getLogger(LogController.class); @GetMapping(\"/log\") public Map&lt;String, Object&gt; home() { if(LOG.isTraceEnabled()){ LOG.trace(\"trace level log\"); } if(LOG.isDebugEnabled()){ LOG.debug(\"debug level log\"); } if(LOG.isInfoEnabled()){ LOG.info(\"info level log\"); } if(LOG.isWarnEnabled()){ LOG.warn(\"warn level log\"); } if(LOG.isErrorEnabled()){ LOG.error(\"error level log\"); } Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); result.put(\"status\", \"good\"); result.put(\"name\", \"abc\"); result.put(\"password\", \"abc\"); return result; }} 测试日志级别启动应用并访问http://127.0.0.1:8080/log控制台打印如图，Spring Boot 默认的 ROOT 日志级别是INFO。 修改指定包的日志级别通过/actuator/loggers端点提供的 POST 请求，修改包路径com.github.huotaihe.spring.boot.log 的日志级别为DEBUG。 发送 post 请求到http://127.0.0.1:8080/actuator/loggers/com.github.huotaihe.spring.boot.log header 信息必须添加Content-Type:application/json 浏览器通过 GET 方式访问如下地址http://127.0.0.1:8080/actuator/loggers/com.github.huotaihe.spring.boot.log查看当前包的目前日志级别 1234{\"configuredLevel\": \"DEBUG\",\"effectiveLevel\": \"DEBUG\"} 再次访问http://127.0.0.1:8080/log 得到 源代码github","link":"/2018/12/17/springboot-runtime-log-level/"},{"title":"Linux下在一行执行多条命令","text":"要实现在一行执行多条Linux命令，分三种情况： &amp;&amp; 1hexo clean &amp;&amp; hexo g 第2条命令只有在第1条命令成功执行之后才执行。当&amp;&amp;前的命令“hexo clean”成功执行后”hexo g”才执行，根据命令产生的退出码判断是否执行成功（0成功，非0失败）。 ||1hexo clean || hexo g 只有||前的命令“hexo clean”执行不成功（产生了一个非0的退出码）时，才执行后面的命令。 ;1hexo clean ; hexo g 顺序执行多条命令，当;号前的命令执行完（不管是否执行成功），才执行;后的命令。 参考：https://www.cnblogs.com/koreaseal/archive/2012/05/28/2522178.html","link":"/2018/12/13/linux-common-command-manual-01/"},{"title":"第二个模板文章","text":"1cd /bin 123456789101112131415161718192021222324252627282930&lt;!-- 通用Mapper插件 文档地址：https://gitee.com/free/Mapper/wikis/Home --&gt;&lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 分页插件 文档地址：https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt;&lt;/dependency&gt;&lt;!-- MYSQL包 --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 默认就内嵌了Tomcat 容器，如需要更换容器也极其简单--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 测试包,当我们使用 mvn package 的时候该包并不会被打入,因为它的生命周期只在 test 之内--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;","link":"/2018/09/28/first-template/"}],"tags":[{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"Springboot","slug":"Springboot","link":"/tags/Springboot/"},{"name":"log","slug":"log","link":"/tags/log/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"Manual","slug":"Manual","link":"/tags/Manual/"},{"name":"Security","slug":"Security","link":"/tags/Security/"},{"name":"权限","slug":"权限","link":"/tags/权限/"}],"categories":[{"name":"Spring","slug":"Spring","link":"/categories/Spring/"},{"name":"Linux 常用命令手册","slug":"Linux-常用命令手册","link":"/categories/Linux-常用命令手册/"},{"name":"Spring Security","slug":"Spring-Security","link":"/categories/Spring-Security/"},{"name":"Springboot","slug":"Spring/Springboot","link":"/categories/Spring/Springboot/"}]}