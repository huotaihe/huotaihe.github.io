{"pages":[{"title":"","text":"404 404 你懂的","link":"/404.html"},{"title":"About","text":"","link":"/about/index.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Docker 常用命令手册","text":"删除所有Docker容器1docker rm `docker ps -a -q` 删除所有Docker镜像1docker rmi `docker images -q` 登陆到Docker容器1docker exec -it &lt;containerId&gt; /bin/bash 通过 Dockerfile 打包镜像1234# 切换到Dockerfile 文件目录cd &lt;docker file path&gt;## 指定镜像名称&lt;iamge name&gt; 镜像路径&lt;image page&gt;docker build -t &lt;image name&gt; &lt;image_path&gt; 重新命名镜像1docker tag &lt;imageId&gt; &lt;image name&gt; 例子 1docker tag ca1b6b825289 huotaihe/selenium:latest 启动容器时通过启动命令绑定HOST1docker run --rm -ti --add-host=&lt;host1&gt;:&lt;ip1&gt; --add-host=&lt;host2&gt;:&lt;ip2&gt; &lt;imageId|imageName&gt; 例子 1docker run -ti --add-host=www.baidu.com:127.0.0.1 --add-host=www.google.com:127.0.0.1 centos 登录容器验证12345678910111213141516171819202122root@13c025719aaa /]# ping www.baidu.comPING www.baidu.com (127.0.0.1) 56(84) bytes of data.64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.048 ms64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.044 ms64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.038 ms64 bytes from localhost (127.0.0.1): icmp_seq=4 ttl=64 time=0.046 ms^C--- www.baidu.com ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 2999msrtt min/avg/max/mdev = 0.038/0.044/0.048/0.003 ms[root@13c025719aaa /]# ping www.google.comPING www.google.com (127.0.0.1) 56(84) bytes of data.64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.045 ms64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.042 ms64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.051 ms64 bytes from localhost (127.0.0.1): icmp_seq=4 ttl=64 time=0.043 ms64 bytes from localhost (127.0.0.1): icmp_seq=5 ttl=64 time=0.046 ms^C--- www.google.com ping statistics ---5 packets transmitted, 5 received, 0% packet loss, time 3999msrtt min/avg/max/mdev = 0.042/0.045/0.051/0.006 ms[root@13c025719aaa /]#","link":"/2018/12/13/docker-common-command-manual/"},{"title":"记一次docker  容器把宿主机系统盘写满的事件","text":"环境信息 Docker version: 1.13.1 Linux version: CentOS Linux release 7.3.1611 (Core) 磁盘分配情况 12345678910[root@HZD-U-ISEE-STUDIO-01 ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 40G 6.9G 31G 19% /devtmpfs 3.9G 0 3.9G 0% /devtmpfs 3.9G 12K 3.9G 1% /dev/shmtmpfs 3.9G 35M 3.8G 1% /runtmpfs 3.9G 0 3.9G 0% /sys/fs/cgroup/dev/vdb1 99G 7.3G 87G 8% /alidata1tmpfs 783M 0 783M 0% /run/user/0tmpfs 783M 0 783M 0% /run/user/1000 问题描述 服务器在运行的过程中，发现不能创建新的docker容器 定位过程 查看CPU和内存 1top 1free -m 发现CPU和内存使用率正常 查看磁盘使用情况 由于一些容器会向nas盘写视频文件，就考虑到有可能是磁盘满了 检查后发现docker的虚拟盘把宿主机的系统盘写满了，导致宿主主机没有磁盘空间创建新的容器 解决方案 把docker 容器文件的存储位置迁移到容量更大的磁盘(“/alidata1”) 下面 解决过程 删除现有的docker容器 12docker stop `docker -a -q`docker rm `docker -a -q` 停止docker 服务 1systemctl stop docker 创建docker 文件存储目录 1mkdir -p /alidata1/docker/graph 修改配置文件 1vim /etc/sysconfig/docker 将文件中的OPTIONS那一行修改如下1OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false --graph=/alidata1/docker/graph' 重新加载配置 1systemctl daemon-reload 启动docker服务 1systemctl start docker 重新拉取镜像 1docker pull &lt;docker image id&gt; ps : 把原来’/var/lib/docker/‘ 目录下的文件拷贝过来，页可以看到镜像，并创建容器；但是容器启动后就消亡了。具体原因待定位，建议重新拉取镜像。 启动容器 1docker run &lt;....&gt; 验证结果 123456789101112131415[root@localhost ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 40G 6.9G 31G 19% /devtmpfs 3.9G 0 3.9G 0% /devtmpfs 3.9G 12K 3.9G 1% /dev/shmtmpfs 3.9G 35M 3.8G 1% /runtmpfs 3.9G 0 3.9G 0% /sys/fs/cgroup/dev/vdb1 99G 7.3G 87G 8% /alidata1tmpfs 783M 0 783M 0% /run/user/0tmpfs 783M 0 783M 0% /run/user/1000overlay 99G 7.3G 87G 8% /alidata1/docker/graph/overlay2/e071ea3439ff52a12ee127875b8511f5d05fdea236386495f99f4ece33bdfeb2/mergedshm 64M 0 64M 0% /alidata1/docker/graph/containers/841a2f9199f5da6159a15156762d5d488eee21c46237b82c192018d1264d6328/shmoverlay 99G 7.3G 87G 8% /alidata1/docker/graph/overlay2/850f00f1665f2c920e1d00aa836517e08e70df48d2fee0c3e4172dd2f95dd7f7/mergedoverlay 99G 7.3G 87G 8% /alidata1/docker/graph/overlay2/12e6e98dd0611e21d70378f32810f97fe86d1c30a9c9c562faf3bfb826d01244/merged[root@localhost ~]# 通过查看磁盘情况，发现新的容器文件已经写到数据盘下了 总结 docker 在生产环境运行的时候，不要把docker文件写在默认的系统盘”/var/lib/docker” 路径下","link":"/2019/05/23/docker-fills-system-volume/"},{"title":"git 常用命令手册","text":"收集工作中常用到的git 命令；只收集不易记忆的，常用的不在罗列都在脑子里。 分支管理本地仓库绑定远程仓库1git remote add origin &lt;remote repositorie&gt; 修改远程仓库地址12345678## 方式一 通过修改远程地址git remote set-url origin &lt;remote repositorie&gt; ## 方式二 先删除后添加git remote rm origingit remote add origin &lt;remote repositorie&gt; ## 方式三修改confige文件vim .git/confiG 查看当前的本地分支与远程分支的关联关系1git branch -vv 把本地分支与远程origin的分支进行关联处理12#&lt;branch name&gt; 代表变量\b，运行时替换为你远程的分支名git branch --set-upstream-to=origin/&lt;branch name&gt; 把当前本地分支推送到指定的远程分支12#&lt;branch name&gt; 代表变量\b，运行时替换为你远程的分支名git push origin &lt;branch name&gt; 编辑管理回滚未提交的代码12#本地所有修改的。没有的提交的，都返回到原来的状态git checkout . 回滚到某个版本节点12345##&lt;hash&gt; 代表你要回滚到的记录点的hash id#返回到某个节点，不保留修改。git reset --hard &lt;hash&gt;#返回到某个节点。保留修改 git reset --soft &lt;hash&gt;","link":"/2018/12/18/git-commond-manual-md/"},{"title":"Linux下在一行执行多条命令","text":"要实现在一行执行多条Linux命令，分三种情况： &amp;&amp; 1hexo clean &amp;&amp; hexo g 第2条命令只有在第1条命令成功执行之后才执行。当&amp;&amp;前的命令“hexo clean”成功执行后”hexo g”才执行，根据命令产生的退出码判断是否执行成功（0成功，非0失败）。 ||1hexo clean || hexo g 只有||前的命令“hexo clean”执行不成功（产生了一个非0的退出码）时，才执行后面的命令。 ;1hexo clean ; hexo g 顺序执行多条命令，当;号前的命令执行完（不管是否执行成功），才执行;后的命令。 参考：https://www.cnblogs.com/koreaseal/archive/2012/05/28/2522178.html","link":"/2018/12/13/linux-common-command-manual-01/"},{"title":"Linux 常用命令手册","text":"收集工作中常用到的Linux 命令；只收集不易记忆的，常用的不在罗列都在脑子里。 目录管理查看当前目录总共占的容量，而不单独列出各子项占用的容量1du -sh 查看当前目录下一级子文件和子目录占用的磁盘容量1du -lh --max-depth=1 系统管理查看端口占用情况查看端口占用情况1lsof -i:&lt;port&gt; 查看操作系统的发行版本1lsb_release -a 例子 123456[root@localhost ~]# lsb_release -aLSB Version: :core-4.1-amd64:core-4.1-noarchDistributor ID: CentOSDescription: CentOS Linux release 7.3.1611 (Core)Release: 7.3.1611Codename: Core VIMvim 统计字符串出现次数（词频）1234567# &lt;pattern&gt; 是需要统计的字符串:%s/&lt;pattern&gt;//gn%s/Ø/\\r/g## 删除所有换行符号%s\\/\\n\\/\\/gc % - 操作区间，全文本；可以使用1, $或行区间替代 s - substitute - 查询字符串 // - 无替代文本。如果偏好，中间可以加任意字符！建议添加‘～’,重复上次查询 g - Replace all occurrences in the line. Without this argument, replacement occurs only for the first occurrence in each line.因此，如果不用此标志，就变成统计出现pattern的行数。 n - Report the number of matches, do not actually substitute.这是核心标志，也是达到目的的标志。同时也说明了为什么’//‘之间可以添加任意字符！","link":"/2018/12/20/linux-common-command-manual-md/"},{"title":"在Centos7 上搭建rabbitmq","text":"安装erlang123456## step1 通过yum安装 erlangyum install erlang## step2 检查erlang是否安装成功erl -version## teminal 输出如下内容说明安装成功Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version 5.10.4 安装rabbit mqRabbitMQ 最新版本地址：https://www.rabbitmq.com/releases/rabbitmq-server/current/ step1. 下载安装包1234## 切换到安装包存放目录cd /tmp## step1 下载安装包wget https://www.rabbitmq.com/releases/rabbitmq-server/current/rabbitmq-server-3.6.15-1.el6.noarch.rpm step2 通过rpm安装1yum install rabbitmq-server-3.6.15-1.el6.noarch.rpm step3 启动RabitMQ 服务1systemctl start rabbitmq-server.service step4 查看RabbitMQ 服务状态1systemctl status rabbitmq-server.service 输出如下信息说明启动成功123456789101112131415● rabbitmq-server.service - LSB: Enable AMQP service provided by RabbitMQ broker Loaded: loaded (/etc/rc.d/init.d/rabbitmq-server; bad; vendor preset: disabled) Active: active (running) since Mon 2019-05-06 20:44:37 CST; 19s ago Docs: man:systemd-sysv-generator(8) Process: 5455 ExecStart=/etc/rc.d/init.d/rabbitmq-server start (code=exited, status=0/SUCCESS) Memory: 67.7M CGroup: /system.slice/rabbitmq-server.service ├─5653 /bin/sh /etc/rc.d/init.d/rabbitmq-server start ├─5655 /bin/bash -c ulimit -S -c 0 &gt;/dev/null 2&gt;&amp;1 ; /usr/sbin/rabbitmq-server ├─5658 /bin/sh /usr/sbin/rabbitmq-server ├─5677 su rabbitmq -s /bin/sh -c /usr/lib/rabbitmq/bin/rabbitmq-server ├─5679 /bin/sh /usr/lib/rabbitmq/bin/rabbitmq-server ├─5868 /usr/lib64/erlang/erts-5.10.4/bin/beam.smp -W w -A 64 -P 1048576 -t 5000000 -stbt db -zdbbl 128000 -K true -B i -- -root /usr/lib64/erlang -progname erl -- -home /var/lib/rabbitmq -- -pa /usr/lib/rabbitmq/lib/rabbitmq... ├─6011 inet_gethost 4 └─6012 inet_gethost 4 step5 查看已经安装的插件1234## 切换到命令所在的目录cd /usr/sbin## 查看插件./rabbitmq-plugins lis 得到如下输出信息123456789101112131415161718192021222324252627282930313233Configured: E = explicitly enabled; e = implicitly enabled | Status: * = running on rabbit@GYB-T-ISEE-STUDIO-01 |/[ ] amqp_client 3.6.15[ ] cowboy 1.0.4[ ] cowlib 1.0.2[ ] rabbitmq_amqp1_0 3.6.15[ ] rabbitmq_auth_backend_ldap 3.6.15[ ] rabbitmq_auth_mechanism_ssl 3.6.15[ ] rabbitmq_consistent_hash_exchange 3.6.15[ ] rabbitmq_event_exchange 3.6.15[ ] rabbitmq_federation 3.6.15[ ] rabbitmq_federation_management 3.6.15[ ] rabbitmq_jms_topic_exchange 3.6.15[ ] rabbitmq_management 3.6.15[ ] rabbitmq_management_agent 3.6.15[ ] rabbitmq_management_visualiser 3.6.15[ ] rabbitmq_mqtt 3.6.15[ ] rabbitmq_random_exchange 3.6.15[ ] rabbitmq_recent_history_exchange 3.6.15[ ] rabbitmq_sharding 3.6.15[ ] rabbitmq_shovel 3.6.15[ ] rabbitmq_shovel_management 3.6.15[ ] rabbitmq_stomp 3.6.15[ ] rabbitmq_top 3.6.15[ ] rabbitmq_tracing 3.6.15[ ] rabbitmq_trust_store 3.6.15[ ] rabbitmq_web_dispatch 3.6.15[ ] rabbitmq_web_mqtt 3.6.15[ ] rabbitmq_web_mqtt_examples 3.6.15[ ] rabbitmq_web_stomp 3.6.15[ ] rabbitmq_web_stomp_examples 3.6.15[ ] sockjs 0.3.4 step6 安装web管理插件12cd /usr/sbinrabbitmq-plugins enable rabbitmq_management 输出如下信息说明启动成功123456789The following plugins have been enabled: amqp_client cowlib cowboy rabbitmq_web_dispatch rabbitmq_management_agent rabbitmq_managementApplying plugin configuration to rabbit@GYB-T-ISEE-STUDIO-01... started 6 plugins. step7 登录WEB管理台 添加admin用户 并赋予管理员权限 1234[root@localhost ~]# rabbitmqctl add_user admin adminCreating user \"admin\"[root@localhost ~]# rabbitmqctl set_user_tags admin administratorSetting tags for user \"admin\" to [administrator] 通过chrome问地址：http://localhost:15672/#/ 参考资料https://blog.csdn.net/cool_summer_moon/article/details/78803661https://blog.battcn.com/2017/08/20/linux/linux-centos7-ribbitmq/","link":"/2019/04/17/rabbitmq-install-on-centos7-md/"},{"title":"springboot 运行时修改日志打印级别","text":"序言 Spring Boot 在 spring-boot-starter-actuator 模块中提供了日志相关的 EndPoint，通过该 EndPoint 可以在运行时不需要重启服务就可以修改日志的打印级别。 解决了以前修改日志打印级别必须要重启服务的烦恼。 环境信息 spring boot 2.0.4.RELEASE(1.5以前的版本不适用该博文) JDK 1.8 POM 信息123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 启用loggers Endpoint出于安全因素考虑，依赖spring-boot-starter-actuator后，默认值启用了“/health”和“/info”两个 Endpoint可以通过如下配置启用所有的 endpoint 1management.endpoints.web.exposure.include=* 也可以通过该配置启用指定的 endpoint1management.endpoints.web.exposure.include=loggers,sessions 查看日志级别我们可以通过浏览器请求到 http://127.0.0.1:8080/actuator/loggers 来获取支持的日志等级，以及系统默认的日志等和各个包路径对应的日志级别。ps: 如下结果是精简过的，实际返回值很多1234567891011121314151617181920212223242526272829303132333435363738394041424344{ \"levels\":[ \"OFF\", \"ERROR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\" ], \"loggers\":{ \"ROOT\":{ \"configuredLevel\":\"INFO\", \"effectiveLevel\":\"INFO\" }, \"com\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring.boot\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring.boot.log\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" }, \"com.github.huotaihe.spring.boot.log.Application\":{ \"configuredLevel\":null, \"effectiveLevel\":\"INFO\" } }} 配置日志级别编写日志输出类编写一个controller 输出各个级别的日志： 注意：日志门面类要使用 commons-log，而不能使用 sl4j；使用 sl4j 会导致日志级别不生效，具体原因会继续跟进。 123456789101112131415161718192021222324252627282930313233343536373839404142package com.github.huotaihe.spring.boot.log;import java.util.HashMap;import java.util.Map;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class LogController { private final static Logger LOG = LoggerFactory.getLogger(LogController.class); @GetMapping(\"/log\") public Map&lt;String, Object&gt; home() { if(LOG.isTraceEnabled()){ LOG.trace(\"trace level log\"); } if(LOG.isDebugEnabled()){ LOG.debug(\"debug level log\"); } if(LOG.isInfoEnabled()){ LOG.info(\"info level log\"); } if(LOG.isWarnEnabled()){ LOG.warn(\"warn level log\"); } if(LOG.isErrorEnabled()){ LOG.error(\"error level log\"); } Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); result.put(\"status\", \"good\"); result.put(\"name\", \"abc\"); result.put(\"password\", \"abc\"); return result; }} 测试日志级别启动应用并访问http://127.0.0.1:8080/log控制台打印如图，Spring Boot 默认的 ROOT 日志级别是INFO。 修改指定包的日志级别通过/actuator/loggers端点提供的 POST 请求，修改包路径com.github.huotaihe.spring.boot.log 的日志级别为DEBUG。 发送 post 请求到http://127.0.0.1:8080/actuator/loggers/com.github.huotaihe.spring.boot.log header 信息必须添加Content-Type:application/json 浏览器通过 GET 方式访问如下地址http://127.0.0.1:8080/actuator/loggers/com.github.huotaihe.spring.boot.log查看当前包的目前日志级别 1234{\"configuredLevel\": \"DEBUG\",\"effectiveLevel\": \"DEBUG\"} 再次访问http://127.0.0.1:8080/log 得到 源代码github","link":"/2018/12/17/springboot-runtime-log-level/"},{"title":"springboot 打包时跳过单元测试","text":"通过修改pom.xml 在项目\b的pom.xml 文件的 &lt;properties&gt; 节点中增加如下节点12&lt;!-- maven方式跳过maven test, 等同 mvn package -Dmaven.test.skip=true --&gt;&lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt; 通过命令行参数 \bmvn命令后添加参数 -Dmaven.test.skip 或者 -DskipTests123mvn package -Dmaven.test.skip=true# 或者mvn install -DskipTests","link":"/2018/12/18/springboot-skip-test/"}],"tags":[{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"Security","slug":"Security","link":"/tags/Security/"},{"name":"权限","slug":"权限","link":"/tags/权限/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"Manual","slug":"Manual","link":"/tags/Manual/"},{"name":"rabbitmq","slug":"rabbitmq","link":"/tags/rabbitmq/"},{"name":"Springboot","slug":"Springboot","link":"/tags/Springboot/"},{"name":"log","slug":"log","link":"/tags/log/"},{"name":"打包","slug":"打包","link":"/tags/打包/"}],"categories":[{"name":"Spring Security","slug":"Spring-Security","link":"/categories/Spring-Security/"},{"name":"生产问题解决","slug":"生产问题解决","link":"/categories/生产问题解决/"},{"name":"Linux 常用命令手册","slug":"Linux-常用命令手册","link":"/categories/Linux-常用命令手册/"},{"name":"Spring","slug":"Spring","link":"/categories/Spring/"},{"name":"深入spring boot","slug":"Spring/深入spring-boot","link":"/categories/Spring/深入spring-boot/"}]}